// src/index.ts
import {join as join3} from "path";
import {existsSync} from "fs";
import {generateSW, injectManifest} from "workbox-build";

// src/html.ts
import {join as _join} from "path";

// src/constants.ts
var FILE_MANIFEST = "manifest.webmanifest";
var FILE_SW_REGISTER = "registerSW.js";
var VIRTUAL_MODULES_MAP = {
  "virtual:pwa-register": "register",
  "virtual:pwa-register/vue": "vue"
};
var VIRTUAL_MODULES_RESOLVE_PREFIX = "/@vite-plugin-pwa/";
var VIRTUAL_MODULES = Object.keys(VIRTUAL_MODULES_MAP);

// src/html.ts
function join(...args) {
  return _join(...args).replace(/\\/g, "/");
}
function generateSimpleSWRegister(options) {
  return `
if('serviceWorker' in navigator) {
window.addEventListener('load', () => {
navigator.serviceWorker.register('${join(options.base, options.filename)}', { scope: '${options.scope}' })
})
}`.replace(/\n/g, "");
}
function injectServiceWorker(html, options) {
  const manifest = `<link rel="manifest" href="${join(options.base, FILE_MANIFEST)}">`;
  if (options.injectRegister === "inline") {
    return html.replace("</head>", `${manifest}<script>${generateSimpleSWRegister(options)}</script></head>`);
  }
  if (options.injectRegister === "script") {
    return html.replace("</head>", `${manifest}<script src="${join(options.base, FILE_SW_REGISTER)}"></script></head>`);
  }
  return html.replace("</head>", `${manifest}</head>`);
}

// src/modules.ts
import {join as join2, resolve} from "path";
import {promises as fs} from "fs";

// src/utils.ts
function slash(str) {
  return str.replace(/\\/g, "/");
}

// src/modules.ts
async function generateRegisterSW(options, mode, source = "register") {
  const sw = slash(join2(options.base, options.filename));
  const scope = options.scope;
  const content = await fs.readFile(resolve(__dirname, `client/${mode}/${source}.mjs`), "utf-8");
  return content.replace("__SW__", sw).replace("__SCOPE__", scope).replace("__SW_AUTO_UPDATE__", `${options.registerType === "autoUpdate"}`);
}

// src/options.ts
import fs2 from "fs";
import {resolve as resolve2} from "path";
function resolveBathPath(base) {
  if (isAbsolute(base))
    return base;
  return !base.startsWith("/") && !base.startsWith("./") ? `/${base}` : base;
}
function isAbsolute(url) {
  return url.match(/^(?:[a-z]+:)?\/\//i);
}
function resolveOptions(options, viteConfig) {
  const root = viteConfig.root;
  const pkg = fs2.existsSync("package.json") ? JSON.parse(fs2.readFileSync("package.json", "utf-8")) : {};
  const {
    mode = process["env"]["NODE_ENV"] || "production",
    srcDir = "public",
    outDir = viteConfig.build.outDir || "dist",
    injectRegister = "auto",
    registerType = "prompt",
    filename = "sw.js",
    strategies = "generateSW",
    minify = true,
    base = viteConfig.base
  } = options;
  const basePath = resolveBathPath(base);
  const swSrc = resolve2(root, srcDir, filename);
  const swDest = resolve2(root, outDir, filename);
  const outDirRoot = resolve2(root, outDir);
  const scope = options.scope || basePath;
  const defaultWorkbox = {
    swDest,
    globDirectory: outDirRoot,
    offlineGoogleAnalytics: false,
    cleanupOutdatedCaches: true,
    mode,
    navigateFallback: "index.html"
  };
  const defaultInjectManifest = {
    swSrc,
    swDest,
    globDirectory: outDirRoot,
    injectionPoint: "self.__WB_MANIFEST"
  };
  const defaultManifest = {
    name: pkg.name,
    short_name: pkg.name,
    start_url: basePath,
    display: "standalone",
    background_color: "#ffffff",
    lang: "en",
    scope
  };
  const workbox = Object.assign({}, defaultWorkbox, options.workbox || {});
  const manifest = Object.assign({}, defaultManifest, options.manifest || {});
  const injectManifest2 = Object.assign({}, defaultInjectManifest, options.injectManifest || {});
  if ((injectRegister === "auto" || registerType == null) && registerType === "autoUpdate") {
    workbox.skipWaiting = true;
    workbox.clientsClaim = true;
  }
  return {
    base: basePath,
    mode,
    swDest,
    srcDir,
    outDir,
    injectRegister,
    registerType,
    filename,
    strategies,
    workbox,
    manifest,
    injectManifest: injectManifest2,
    scope,
    minify
  };
}

// src/cache.ts
var cachePreset = [
  {
    urlPattern: /^https:\/\/fonts\.(?:googleapis|gstatic)\.com\/.*/i,
    handler: "CacheFirst",
    options: {
      cacheName: "google-fonts",
      expiration: {
        maxEntries: 4,
        maxAgeSeconds: 365 * 24 * 60 * 60
      }
    }
  },
  {
    urlPattern: /\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,
    handler: "StaleWhileRevalidate",
    options: {
      cacheName: "static-font-assets",
      expiration: {
        maxEntries: 4,
        maxAgeSeconds: 7 * 24 * 60 * 60
      }
    }
  },
  {
    urlPattern: /\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,
    handler: "StaleWhileRevalidate",
    options: {
      cacheName: "static-image-assets",
      expiration: {
        maxEntries: 64,
        maxAgeSeconds: 24 * 60 * 60
      }
    }
  },
  {
    urlPattern: /\.(?:js)$/i,
    handler: "StaleWhileRevalidate",
    options: {
      cacheName: "static-js-assets",
      expiration: {
        maxEntries: 32,
        maxAgeSeconds: 24 * 60 * 60
      }
    }
  },
  {
    urlPattern: /\.(?:css|less)$/i,
    handler: "StaleWhileRevalidate",
    options: {
      cacheName: "static-style-assets",
      expiration: {
        maxEntries: 32,
        maxAgeSeconds: 24 * 60 * 60
      }
    }
  },
  {
    urlPattern: /\.(?:json|xml|csv)$/i,
    handler: "NetworkFirst",
    options: {
      cacheName: "static-data-assets",
      expiration: {
        maxEntries: 32,
        maxAgeSeconds: 24 * 60 * 60
      }
    }
  },
  {
    urlPattern: /\/api\/.*$/i,
    handler: "NetworkFirst",
    method: "GET",
    options: {
      cacheName: "apis",
      expiration: {
        maxEntries: 16,
        maxAgeSeconds: 24 * 60 * 60
      },
      networkTimeoutSeconds: 10
    }
  },
  {
    urlPattern: /.*/i,
    handler: "NetworkFirst",
    options: {
      cacheName: "others",
      expiration: {
        maxEntries: 32,
        maxAgeSeconds: 24 * 60 * 60
      },
      networkTimeoutSeconds: 10
    }
  }
];

// src/index.ts
function VitePWA(userOptions = {}) {
  let viteConfig;
  let options;
  let useImportRegister = false;
  return [
    {
      name: "vite-plugin-pwa",
      enforce: "post",
      apply: "build",
      configResolved(config) {
        viteConfig = config;
        options = resolveOptions(userOptions, viteConfig);
      },
      transformIndexHtml: {
        enforce: "post",
        transform(html) {
          return injectServiceWorker(html, options);
        }
      },
      generateBundle(_, bundle) {
        bundle[FILE_MANIFEST] = {
          isAsset: true,
          type: "asset",
          name: void 0,
          source: `${JSON.stringify(options.manifest, null, options.minify ? 0 : 2)}
`,
          fileName: FILE_MANIFEST
        };
        if (options.injectRegister === "auto")
          options.injectRegister = useImportRegister ? null : "script";
        if (options.injectRegister === "script" && !existsSync(join3(viteConfig.root, "public", FILE_SW_REGISTER))) {
          bundle[FILE_SW_REGISTER] = {
            isAsset: true,
            type: "asset",
            name: void 0,
            source: generateSimpleSWRegister(options),
            fileName: FILE_SW_REGISTER
          };
        }
      },
      async closeBundle() {
        if (!viteConfig.build.ssr) {
          if (options.strategies === "injectManifest")
            await injectManifest(options.injectManifest);
          else
            await generateSW(options.workbox);
        }
      }
    },
    {
      name: "vite-plugin-pwa:virtual",
      configResolved(config) {
        viteConfig = config;
        options = resolveOptions(userOptions, viteConfig);
      },
      resolveId(id) {
        return VIRTUAL_MODULES.includes(id) ? VIRTUAL_MODULES_RESOLVE_PREFIX + id : void 0;
      },
      load(id) {
        if (id.startsWith(VIRTUAL_MODULES_RESOLVE_PREFIX))
          id = id.slice(VIRTUAL_MODULES_RESOLVE_PREFIX.length);
        else
          return;
        if (VIRTUAL_MODULES.includes(id)) {
          useImportRegister = true;
          return generateRegisterSW(options, viteConfig.command === "build" ? "build" : "dev", VIRTUAL_MODULES_MAP[id]);
        }
      }
    }
  ];
}
export {
  VitePWA,
  cachePreset
};
